Grammar

    0 $accept: program "end file"

    1 program: globals

    2 globals: globals varDecl SEMICOL
    3        | globals fnDecl
    4        | ε

    5 varDecl: type id

    6 type: primType
    7     | FN fnType

    8 primType: INT
    9         | BOOL
   10         | VOID

   11 fnType: LPAREN typeList RPAREN ARROW type
   12       | LPAREN RPAREN ARROW type

   13 typeList: type
   14         | typeList COMMA type

   15 fnDecl: type id LPAREN RPAREN LCURLY stmtList RCURLY
   16       | type id LPAREN formals RPAREN LCURLY stmtList RCURLY

   17 formals: formalDecl
   18        | formals COMMA formalDecl

   19 formalDecl: type id

   20 stmtList: ε
   21         | stmtList stmt SEMICOL
   22         | stmtList blockStmt

   23 blockStmt: WHILE LPAREN exp RPAREN LCURLY stmtList RCURLY
   24          | FOR LPAREN stmt SEMICOL exp SEMICOL stmt RPAREN LCURLY stmtList RCURLY
   25          | IF LPAREN exp RPAREN LCURLY stmtList RCURLY
   26          | IF LPAREN exp RPAREN LCURLY stmtList RCURLY ELSE LCURLY stmtList RCURLY

   27 stmt: varDecl
   28     | assignExp
   29     | id POSTDEC
   30     | id POSTINC
   31     | INPUT id
   32     | OUTPUT exp
   33     | RETURN exp
   34     | RETURN
   35     | callExp

   36 exp: assignExp
   37    | exp MINUS exp
   38    | exp PLUS exp
   39    | exp TIMES exp
   40    | exp DIVIDE exp
   41    | exp AND exp
   42    | exp OR exp
   43    | exp EQUALS exp
   44    | exp NOTEQUALS exp
   45    | exp GREATER exp
   46    | exp GREATEREQ exp
   47    | exp LESS exp
   48    | exp LESSEQ exp
   49    | NOT exp
   50    | MINUS term
   51    | term

   52 assignExp: id ASSIGN exp

   53 callExp: id LPAREN RPAREN
   54        | id LPAREN actualsList RPAREN

   55 actualsList: exp
   56            | actualsList COMMA exp

   57 term: id
   58     | INTLITERAL
   59     | STRINGLITERAL
   60     | TRUE
   61     | FALSE
   62     | LPAREN exp RPAREN
   63     | MAYHEM
   64     | callExp

   65 id: ID


Terminals, with rules where they appear

    "end file" (0) 0
    error (256)
    AND <transToken> (258) 41
    ARROW <transToken> (259) 11 12
    ASSIGN <transToken> (260) 52
    BOOL <transToken> (261) 9
    COMMA <transToken> (262) 14 18 56
    DIVIDE <transToken> (263) 40
    ELSE <transToken> (264) 26
    EQUALS <transToken> (265) 43
    FALSE <transToken> (266) 61
    FN <transToken> (267) 7
    FOR <transToken> (268) 24
    GREATER <transToken> (269) 45
    GREATEREQ <transToken> (270) 46
    ID <transIDToken> (271) 65
    IF <transToken> (272) 25 26
    INPUT <transToken> (273) 31
    INT <transToken> (274) 8
    INTLITERAL <transIntToken> (275) 58
    LCURLY <transToken> (276) 15 16 23 24 25 26
    LESS <transToken> (277) 47
    LESSEQ <transToken> (278) 48
    LPAREN <transToken> (279) 11 12 15 16 23 24 25 26 53 54 62
    MINUS <transToken> (280) 37 50
    MAYHEM <transToken> (281) 63
    NOT <transToken> (282) 49
    NOTEQUALS <transToken> (283) 44
    OR <transToken> (284) 42
    OUTPUT <transToken> (285) 32
    PLUS <transToken> (286) 38
    POSTDEC <transToken> (287) 29
    POSTINC <transToken> (288) 30
    RETURN <transToken> (289) 33 34
    RCURLY <transToken> (290) 15 16 23 24 25 26
    RPAREN <transToken> (291) 11 12 15 16 23 24 25 26 53 54 62
    SEMICOL <transToken> (292) 2 21 24
    STRINGLITERAL <transStrToken> (293) 59
    TIMES <transToken> (294) 39
    TRUE <transToken> (295) 60
    VOID <transToken> (296) 10
    WHILE <transToken> (297) 23


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program <transProgram> (44)
        on left: 1
        on right: 0
    globals <transDeclList> (45)
        on left: 2 3 4
        on right: 1 2 3
    varDecl <transVarDecl> (46)
        on left: 5
        on right: 2 27
    type <transType> (47)
        on left: 6 7
        on right: 5 11 12 13 14 15 16 19
    primType <transType> (48)
        on left: 8 9 10
        on right: 6
    fnType <transFnType> (49)
        on left: 11 12
        on right: 7
    typeList <transTypeList> (50)
        on left: 13 14
        on right: 11 14
    fnDecl <transFn> (51)
        on left: 15 16
        on right: 3
    formals <transFormalList> (52)
        on left: 17 18
        on right: 16 18
    formalDecl <transFormal> (53)
        on left: 19
        on right: 17 18
    stmtList <transStmts> (54)
        on left: 20 21 22
        on right: 15 16 21 22 23 24 25 26
    blockStmt <transStmt> (55)
        on left: 23 24 25 26
        on right: 22
    stmt <transStmt> (56)
        on left: 27 28 29 30 31 32 33 34 35
        on right: 21 24
    exp <transExp> (57)
        on left: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
        on right: 23 24 25 26 32 33 37 38 39 40 41 42 43 44 45 46 47 48 49 52 55 56 62
    assignExp <transAssignExp> (58)
        on left: 52
        on right: 28 36
    callExp <transCallExp> (59)
        on left: 53 54
        on right: 35 64
    actualsList <transActuals> (60)
        on left: 55 56
        on right: 54 56
    term <transExp> (61)
        on left: 57 58 59 60 61 62 63 64
        on right: 50 51
    id <transID> (62)
        on left: 65
        on right: 5 15 16 19 29 30 31 52 53 54 57


State 0

    0 $accept: • program "end file"

    $default  reduce using rule 4 (globals)

    program  go to state 1
    globals  go to state 2


State 1

    0 $accept: program • "end file"

    "end file"  shift, and go to state 3


State 2

    1 program: globals •
    2 globals: globals • varDecl SEMICOL
    3        | globals • fnDecl

    BOOL  shift, and go to state 4
    FN    shift, and go to state 5
    INT   shift, and go to state 6
    VOID  shift, and go to state 7

    $default  reduce using rule 1 (program)

    varDecl   go to state 8
    type      go to state 9
    primType  go to state 10
    fnDecl    go to state 11


State 3

    0 $accept: program "end file" •

    $default  accept


State 4

    9 primType: BOOL •

    $default  reduce using rule 9 (primType)


State 5

    7 type: FN • fnType

    LPAREN  shift, and go to state 12

    fnType  go to state 13


State 6

    8 primType: INT •

    $default  reduce using rule 8 (primType)


State 7

   10 primType: VOID •

    $default  reduce using rule 10 (primType)


State 8

    2 globals: globals varDecl • SEMICOL

    SEMICOL  shift, and go to state 14


State 9

    5 varDecl: type • id
   15 fnDecl: type • id LPAREN RPAREN LCURLY stmtList RCURLY
   16       | type • id LPAREN formals RPAREN LCURLY stmtList RCURLY

    ID  shift, and go to state 15

    id  go to state 16


State 10

    6 type: primType •

    $default  reduce using rule 6 (type)


State 11

    3 globals: globals fnDecl •

    $default  reduce using rule 3 (globals)


State 12

   11 fnType: LPAREN • typeList RPAREN ARROW type
   12       | LPAREN • RPAREN ARROW type

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    INT     shift, and go to state 6
    RPAREN  shift, and go to state 17
    VOID    shift, and go to state 7

    type      go to state 18
    primType  go to state 10
    typeList  go to state 19


State 13

    7 type: FN fnType •

    $default  reduce using rule 7 (type)


State 14

    2 globals: globals varDecl SEMICOL •

    $default  reduce using rule 2 (globals)


State 15

   65 id: ID •

    $default  reduce using rule 65 (id)


State 16

    5 varDecl: type id •
   15 fnDecl: type id • LPAREN RPAREN LCURLY stmtList RCURLY
   16       | type id • LPAREN formals RPAREN LCURLY stmtList RCURLY

    LPAREN  shift, and go to state 20

    $default  reduce using rule 5 (varDecl)


State 17

   12 fnType: LPAREN RPAREN • ARROW type

    ARROW  shift, and go to state 21


State 18

   13 typeList: type •

    $default  reduce using rule 13 (typeList)


State 19

   11 fnType: LPAREN typeList • RPAREN ARROW type
   14 typeList: typeList • COMMA type

    COMMA   shift, and go to state 22
    RPAREN  shift, and go to state 23


State 20

   15 fnDecl: type id LPAREN • RPAREN LCURLY stmtList RCURLY
   16       | type id LPAREN • formals RPAREN LCURLY stmtList RCURLY

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    INT     shift, and go to state 6
    RPAREN  shift, and go to state 24
    VOID    shift, and go to state 7

    type        go to state 25
    primType    go to state 10
    formals     go to state 26
    formalDecl  go to state 27


State 21

   12 fnType: LPAREN RPAREN ARROW • type

    BOOL  shift, and go to state 4
    FN    shift, and go to state 5
    INT   shift, and go to state 6
    VOID  shift, and go to state 7

    type      go to state 28
    primType  go to state 10


State 22

   14 typeList: typeList COMMA • type

    BOOL  shift, and go to state 4
    FN    shift, and go to state 5
    INT   shift, and go to state 6
    VOID  shift, and go to state 7

    type      go to state 29
    primType  go to state 10


State 23

   11 fnType: LPAREN typeList RPAREN • ARROW type

    ARROW  shift, and go to state 30


State 24

   15 fnDecl: type id LPAREN RPAREN • LCURLY stmtList RCURLY

    LCURLY  shift, and go to state 31


State 25

   19 formalDecl: type • id

    ID  shift, and go to state 15

    id  go to state 32


State 26

   16 fnDecl: type id LPAREN formals • RPAREN LCURLY stmtList RCURLY
   18 formals: formals • COMMA formalDecl

    COMMA   shift, and go to state 33
    RPAREN  shift, and go to state 34


State 27

   17 formals: formalDecl •

    $default  reduce using rule 17 (formals)


State 28

   12 fnType: LPAREN RPAREN ARROW type •

    $default  reduce using rule 12 (fnType)


State 29

   14 typeList: typeList COMMA type •

    $default  reduce using rule 14 (typeList)


State 30

   11 fnType: LPAREN typeList RPAREN ARROW • type

    BOOL  shift, and go to state 4
    FN    shift, and go to state 5
    INT   shift, and go to state 6
    VOID  shift, and go to state 7

    type      go to state 35
    primType  go to state 10


State 31

   15 fnDecl: type id LPAREN RPAREN LCURLY • stmtList RCURLY

    $default  reduce using rule 20 (stmtList)

    stmtList  go to state 36


State 32

   19 formalDecl: type id •

    $default  reduce using rule 19 (formalDecl)


State 33

   18 formals: formals COMMA • formalDecl

    BOOL  shift, and go to state 4
    FN    shift, and go to state 5
    INT   shift, and go to state 6
    VOID  shift, and go to state 7

    type        go to state 25
    primType    go to state 10
    formalDecl  go to state 37


State 34

   16 fnDecl: type id LPAREN formals RPAREN • LCURLY stmtList RCURLY

    LCURLY  shift, and go to state 38


State 35

   11 fnType: LPAREN typeList RPAREN ARROW type •

    $default  reduce using rule 11 (fnType)


State 36

   15 fnDecl: type id LPAREN RPAREN LCURLY stmtList • RCURLY
   21 stmtList: stmtList • stmt SEMICOL
   22         | stmtList • blockStmt

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    FOR     shift, and go to state 39
    ID      shift, and go to state 15
    IF      shift, and go to state 40
    INPUT   shift, and go to state 41
    INT     shift, and go to state 6
    OUTPUT  shift, and go to state 42
    RETURN  shift, and go to state 43
    RCURLY  shift, and go to state 44
    VOID    shift, and go to state 7
    WHILE   shift, and go to state 45

    varDecl    go to state 46
    type       go to state 47
    primType   go to state 10
    blockStmt  go to state 48
    stmt       go to state 49
    assignExp  go to state 50
    callExp    go to state 51
    id         go to state 52


State 37

   18 formals: formals COMMA formalDecl •

    $default  reduce using rule 18 (formals)


State 38

   16 fnDecl: type id LPAREN formals RPAREN LCURLY • stmtList RCURLY

    $default  reduce using rule 20 (stmtList)

    stmtList  go to state 53


State 39

   24 blockStmt: FOR • LPAREN stmt SEMICOL exp SEMICOL stmt RPAREN LCURLY stmtList RCURLY

    LPAREN  shift, and go to state 54


State 40

   25 blockStmt: IF • LPAREN exp RPAREN LCURLY stmtList RCURLY
   26          | IF • LPAREN exp RPAREN LCURLY stmtList RCURLY ELSE LCURLY stmtList RCURLY

    LPAREN  shift, and go to state 55


State 41

   31 stmt: INPUT • id

    ID  shift, and go to state 15

    id  go to state 56


State 42

   32 stmt: OUTPUT • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 65
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 43

   33 stmt: RETURN • exp
   34     | RETURN •

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    $default  reduce using rule 34 (stmt)

    exp        go to state 70
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 44

   15 fnDecl: type id LPAREN RPAREN LCURLY stmtList RCURLY •

    $default  reduce using rule 15 (fnDecl)


State 45

   23 blockStmt: WHILE • LPAREN exp RPAREN LCURLY stmtList RCURLY

    LPAREN  shift, and go to state 71


State 46

   27 stmt: varDecl •

    $default  reduce using rule 27 (stmt)


State 47

    5 varDecl: type • id

    ID  shift, and go to state 15

    id  go to state 72


State 48

   22 stmtList: stmtList blockStmt •

    $default  reduce using rule 22 (stmtList)


State 49

   21 stmtList: stmtList stmt • SEMICOL

    SEMICOL  shift, and go to state 73


State 50

   28 stmt: assignExp •

    $default  reduce using rule 28 (stmt)


State 51

   35 stmt: callExp •

    $default  reduce using rule 35 (stmt)


State 52

   29 stmt: id • POSTDEC
   30     | id • POSTINC
   52 assignExp: id • ASSIGN exp
   53 callExp: id • LPAREN RPAREN
   54        | id • LPAREN actualsList RPAREN

    ASSIGN   shift, and go to state 74
    LPAREN   shift, and go to state 75
    POSTDEC  shift, and go to state 76
    POSTINC  shift, and go to state 77


State 53

   16 fnDecl: type id LPAREN formals RPAREN LCURLY stmtList • RCURLY
   21 stmtList: stmtList • stmt SEMICOL
   22         | stmtList • blockStmt

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    FOR     shift, and go to state 39
    ID      shift, and go to state 15
    IF      shift, and go to state 40
    INPUT   shift, and go to state 41
    INT     shift, and go to state 6
    OUTPUT  shift, and go to state 42
    RETURN  shift, and go to state 43
    RCURLY  shift, and go to state 78
    VOID    shift, and go to state 7
    WHILE   shift, and go to state 45

    varDecl    go to state 46
    type       go to state 47
    primType   go to state 10
    blockStmt  go to state 48
    stmt       go to state 49
    assignExp  go to state 50
    callExp    go to state 51
    id         go to state 52


State 54

   24 blockStmt: FOR LPAREN • stmt SEMICOL exp SEMICOL stmt RPAREN LCURLY stmtList RCURLY

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    ID      shift, and go to state 15
    INPUT   shift, and go to state 41
    INT     shift, and go to state 6
    OUTPUT  shift, and go to state 42
    RETURN  shift, and go to state 43
    VOID    shift, and go to state 7

    varDecl    go to state 46
    type       go to state 47
    primType   go to state 10
    stmt       go to state 79
    assignExp  go to state 50
    callExp    go to state 51
    id         go to state 52


State 55

   25 blockStmt: IF LPAREN • exp RPAREN LCURLY stmtList RCURLY
   26          | IF LPAREN • exp RPAREN LCURLY stmtList RCURLY ELSE LCURLY stmtList RCURLY

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 80
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 56

   31 stmt: INPUT id •

    $default  reduce using rule 31 (stmt)


State 57

   61 term: FALSE •

    $default  reduce using rule 61 (term)


State 58

   58 term: INTLITERAL •

    $default  reduce using rule 58 (term)


State 59

   62 term: LPAREN • exp RPAREN

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 81
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 60

   50 exp: MINUS • term

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MAYHEM         shift, and go to state 61
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    callExp  go to state 67
    term     go to state 82
    id       go to state 83


State 61

   63 term: MAYHEM •

    $default  reduce using rule 63 (term)


State 62

   49 exp: NOT • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 84
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 63

   59 term: STRINGLITERAL •

    $default  reduce using rule 59 (term)


State 64

   60 term: TRUE •

    $default  reduce using rule 60 (term)


State 65

   32 stmt: OUTPUT exp •
   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    OR         shift, and go to state 94
    PLUS       shift, and go to state 95
    TIMES      shift, and go to state 96

    $default  reduce using rule 32 (stmt)


State 66

   36 exp: assignExp •

    $default  reduce using rule 36 (exp)


State 67

   64 term: callExp •

    $default  reduce using rule 64 (term)


State 68

   51 exp: term •

    $default  reduce using rule 51 (exp)


State 69

   52 assignExp: id • ASSIGN exp
   53 callExp: id • LPAREN RPAREN
   54        | id • LPAREN actualsList RPAREN
   57 term: id •

    ASSIGN  shift, and go to state 74
    LPAREN  shift, and go to state 75

    $default  reduce using rule 57 (term)


State 70

   33 stmt: RETURN exp •
   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    OR         shift, and go to state 94
    PLUS       shift, and go to state 95
    TIMES      shift, and go to state 96

    $default  reduce using rule 33 (stmt)


State 71

   23 blockStmt: WHILE LPAREN • exp RPAREN LCURLY stmtList RCURLY

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 97
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 72

    5 varDecl: type id •

    $default  reduce using rule 5 (varDecl)


State 73

   21 stmtList: stmtList stmt SEMICOL •

    $default  reduce using rule 21 (stmtList)


State 74

   52 assignExp: id ASSIGN • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 98
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 75

   53 callExp: id LPAREN • RPAREN
   54        | id LPAREN • actualsList RPAREN

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    RPAREN         shift, and go to state 99
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp          go to state 100
    assignExp    go to state 66
    callExp      go to state 67
    actualsList  go to state 101
    term         go to state 68
    id           go to state 69


State 76

   29 stmt: id POSTDEC •

    $default  reduce using rule 29 (stmt)


State 77

   30 stmt: id POSTINC •

    $default  reduce using rule 30 (stmt)


State 78

   16 fnDecl: type id LPAREN formals RPAREN LCURLY stmtList RCURLY •

    $default  reduce using rule 16 (fnDecl)


State 79

   24 blockStmt: FOR LPAREN stmt • SEMICOL exp SEMICOL stmt RPAREN LCURLY stmtList RCURLY

    SEMICOL  shift, and go to state 102


State 80

   25 blockStmt: IF LPAREN exp • RPAREN LCURLY stmtList RCURLY
   26          | IF LPAREN exp • RPAREN LCURLY stmtList RCURLY ELSE LCURLY stmtList RCURLY
   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    OR         shift, and go to state 94
    PLUS       shift, and go to state 95
    RPAREN     shift, and go to state 103
    TIMES      shift, and go to state 96


State 81

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp
   62 term: LPAREN exp • RPAREN

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    OR         shift, and go to state 94
    PLUS       shift, and go to state 95
    RPAREN     shift, and go to state 104
    TIMES      shift, and go to state 96


State 82

   50 exp: MINUS term •

    $default  reduce using rule 50 (exp)


State 83

   53 callExp: id • LPAREN RPAREN
   54        | id • LPAREN actualsList RPAREN
   57 term: id •

    LPAREN  shift, and go to state 75

    $default  reduce using rule 57 (term)


State 84

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp
   49    | NOT exp •

    $default  reduce using rule 49 (exp)


State 85

   41 exp: exp AND • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 105
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 86

   40 exp: exp DIVIDE • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 106
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 87

   43 exp: exp EQUALS • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 107
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 88

   45 exp: exp GREATER • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 108
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 89

   46 exp: exp GREATEREQ • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 109
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 90

   47 exp: exp LESS • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 110
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 91

   48 exp: exp LESSEQ • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 111
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 92

   37 exp: exp MINUS • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 112
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 93

   44 exp: exp NOTEQUALS • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 113
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 94

   42 exp: exp OR • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 114
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 95

   38 exp: exp PLUS • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 115
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 96

   39 exp: exp TIMES • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 116
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 97

   23 blockStmt: WHILE LPAREN exp • RPAREN LCURLY stmtList RCURLY
   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    OR         shift, and go to state 94
    PLUS       shift, and go to state 95
    RPAREN     shift, and go to state 117
    TIMES      shift, and go to state 96


State 98

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp
   52 assignExp: id ASSIGN exp •

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    OR         shift, and go to state 94
    PLUS       shift, and go to state 95
    TIMES      shift, and go to state 96

    $default  reduce using rule 52 (assignExp)


State 99

   53 callExp: id LPAREN RPAREN •

    $default  reduce using rule 53 (callExp)


State 100

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp
   55 actualsList: exp •

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    OR         shift, and go to state 94
    PLUS       shift, and go to state 95
    TIMES      shift, and go to state 96

    $default  reduce using rule 55 (actualsList)


State 101

   54 callExp: id LPAREN actualsList • RPAREN
   56 actualsList: actualsList • COMMA exp

    COMMA   shift, and go to state 118
    RPAREN  shift, and go to state 119


State 102

   24 blockStmt: FOR LPAREN stmt SEMICOL • exp SEMICOL stmt RPAREN LCURLY stmtList RCURLY

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 120
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 103

   25 blockStmt: IF LPAREN exp RPAREN • LCURLY stmtList RCURLY
   26          | IF LPAREN exp RPAREN • LCURLY stmtList RCURLY ELSE LCURLY stmtList RCURLY

    LCURLY  shift, and go to state 121


State 104

   62 term: LPAREN exp RPAREN •

    $default  reduce using rule 62 (term)


State 105

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   41    | exp AND exp •
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    PLUS       shift, and go to state 95
    TIMES      shift, and go to state 96

    $default  reduce using rule 41 (exp)


State 106

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   40    | exp DIVIDE exp •
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    $default  reduce using rule 40 (exp)


State 107

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   43    | exp EQUALS exp •
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    DIVIDE  shift, and go to state 86
    MINUS   shift, and go to state 92
    PLUS    shift, and go to state 95
    TIMES   shift, and go to state 96

    EQUALS     error (nonassociative)
    GREATER    error (nonassociative)
    GREATEREQ  error (nonassociative)
    LESS       error (nonassociative)
    LESSEQ     error (nonassociative)
    NOTEQUALS  error (nonassociative)

    $default  reduce using rule 43 (exp)


State 108

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   45    | exp GREATER exp •
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    DIVIDE  shift, and go to state 86
    MINUS   shift, and go to state 92
    PLUS    shift, and go to state 95
    TIMES   shift, and go to state 96

    EQUALS     error (nonassociative)
    GREATER    error (nonassociative)
    GREATEREQ  error (nonassociative)
    LESS       error (nonassociative)
    LESSEQ     error (nonassociative)
    NOTEQUALS  error (nonassociative)

    $default  reduce using rule 45 (exp)


State 109

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   46    | exp GREATEREQ exp •
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    DIVIDE  shift, and go to state 86
    MINUS   shift, and go to state 92
    PLUS    shift, and go to state 95
    TIMES   shift, and go to state 96

    EQUALS     error (nonassociative)
    GREATER    error (nonassociative)
    GREATEREQ  error (nonassociative)
    LESS       error (nonassociative)
    LESSEQ     error (nonassociative)
    NOTEQUALS  error (nonassociative)

    $default  reduce using rule 46 (exp)


State 110

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   47    | exp LESS exp •
   48    | exp • LESSEQ exp

    DIVIDE  shift, and go to state 86
    MINUS   shift, and go to state 92
    PLUS    shift, and go to state 95
    TIMES   shift, and go to state 96

    EQUALS     error (nonassociative)
    GREATER    error (nonassociative)
    GREATEREQ  error (nonassociative)
    LESS       error (nonassociative)
    LESSEQ     error (nonassociative)
    NOTEQUALS  error (nonassociative)

    $default  reduce using rule 47 (exp)


State 111

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp
   48    | exp LESSEQ exp •

    DIVIDE  shift, and go to state 86
    MINUS   shift, and go to state 92
    PLUS    shift, and go to state 95
    TIMES   shift, and go to state 96

    EQUALS     error (nonassociative)
    GREATER    error (nonassociative)
    GREATEREQ  error (nonassociative)
    LESS       error (nonassociative)
    LESSEQ     error (nonassociative)
    NOTEQUALS  error (nonassociative)

    $default  reduce using rule 48 (exp)


State 112

   37 exp: exp • MINUS exp
   37    | exp MINUS exp •
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    DIVIDE  shift, and go to state 86
    TIMES   shift, and go to state 96

    $default  reduce using rule 37 (exp)


State 113

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   44    | exp NOTEQUALS exp •
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    DIVIDE  shift, and go to state 86
    MINUS   shift, and go to state 92
    PLUS    shift, and go to state 95
    TIMES   shift, and go to state 96

    EQUALS     error (nonassociative)
    GREATER    error (nonassociative)
    GREATEREQ  error (nonassociative)
    LESS       error (nonassociative)
    LESSEQ     error (nonassociative)
    NOTEQUALS  error (nonassociative)

    $default  reduce using rule 44 (exp)


State 114

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   42    | exp OR exp •
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    PLUS       shift, and go to state 95
    TIMES      shift, and go to state 96

    $default  reduce using rule 42 (exp)


State 115

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   38    | exp PLUS exp •
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    DIVIDE  shift, and go to state 86
    TIMES   shift, and go to state 96

    $default  reduce using rule 38 (exp)


State 116

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   39    | exp TIMES exp •
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    $default  reduce using rule 39 (exp)


State 117

   23 blockStmt: WHILE LPAREN exp RPAREN • LCURLY stmtList RCURLY

    LCURLY  shift, and go to state 122


State 118

   56 actualsList: actualsList COMMA • exp

    FALSE          shift, and go to state 57
    ID             shift, and go to state 15
    INTLITERAL     shift, and go to state 58
    LPAREN         shift, and go to state 59
    MINUS          shift, and go to state 60
    MAYHEM         shift, and go to state 61
    NOT            shift, and go to state 62
    STRINGLITERAL  shift, and go to state 63
    TRUE           shift, and go to state 64

    exp        go to state 123
    assignExp  go to state 66
    callExp    go to state 67
    term       go to state 68
    id         go to state 69


State 119

   54 callExp: id LPAREN actualsList RPAREN •

    $default  reduce using rule 54 (callExp)


State 120

   24 blockStmt: FOR LPAREN stmt SEMICOL exp • SEMICOL stmt RPAREN LCURLY stmtList RCURLY
   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    OR         shift, and go to state 94
    PLUS       shift, and go to state 95
    SEMICOL    shift, and go to state 124
    TIMES      shift, and go to state 96


State 121

   25 blockStmt: IF LPAREN exp RPAREN LCURLY • stmtList RCURLY
   26          | IF LPAREN exp RPAREN LCURLY • stmtList RCURLY ELSE LCURLY stmtList RCURLY

    $default  reduce using rule 20 (stmtList)

    stmtList  go to state 125


State 122

   23 blockStmt: WHILE LPAREN exp RPAREN LCURLY • stmtList RCURLY

    $default  reduce using rule 20 (stmtList)

    stmtList  go to state 126


State 123

   37 exp: exp • MINUS exp
   38    | exp • PLUS exp
   39    | exp • TIMES exp
   40    | exp • DIVIDE exp
   41    | exp • AND exp
   42    | exp • OR exp
   43    | exp • EQUALS exp
   44    | exp • NOTEQUALS exp
   45    | exp • GREATER exp
   46    | exp • GREATEREQ exp
   47    | exp • LESS exp
   48    | exp • LESSEQ exp
   56 actualsList: actualsList COMMA exp •

    AND        shift, and go to state 85
    DIVIDE     shift, and go to state 86
    EQUALS     shift, and go to state 87
    GREATER    shift, and go to state 88
    GREATEREQ  shift, and go to state 89
    LESS       shift, and go to state 90
    LESSEQ     shift, and go to state 91
    MINUS      shift, and go to state 92
    NOTEQUALS  shift, and go to state 93
    OR         shift, and go to state 94
    PLUS       shift, and go to state 95
    TIMES      shift, and go to state 96

    $default  reduce using rule 56 (actualsList)


State 124

   24 blockStmt: FOR LPAREN stmt SEMICOL exp SEMICOL • stmt RPAREN LCURLY stmtList RCURLY

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    ID      shift, and go to state 15
    INPUT   shift, and go to state 41
    INT     shift, and go to state 6
    OUTPUT  shift, and go to state 42
    RETURN  shift, and go to state 43
    VOID    shift, and go to state 7

    varDecl    go to state 46
    type       go to state 47
    primType   go to state 10
    stmt       go to state 127
    assignExp  go to state 50
    callExp    go to state 51
    id         go to state 52


State 125

   21 stmtList: stmtList • stmt SEMICOL
   22         | stmtList • blockStmt
   25 blockStmt: IF LPAREN exp RPAREN LCURLY stmtList • RCURLY
   26          | IF LPAREN exp RPAREN LCURLY stmtList • RCURLY ELSE LCURLY stmtList RCURLY

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    FOR     shift, and go to state 39
    ID      shift, and go to state 15
    IF      shift, and go to state 40
    INPUT   shift, and go to state 41
    INT     shift, and go to state 6
    OUTPUT  shift, and go to state 42
    RETURN  shift, and go to state 43
    RCURLY  shift, and go to state 128
    VOID    shift, and go to state 7
    WHILE   shift, and go to state 45

    varDecl    go to state 46
    type       go to state 47
    primType   go to state 10
    blockStmt  go to state 48
    stmt       go to state 49
    assignExp  go to state 50
    callExp    go to state 51
    id         go to state 52


State 126

   21 stmtList: stmtList • stmt SEMICOL
   22         | stmtList • blockStmt
   23 blockStmt: WHILE LPAREN exp RPAREN LCURLY stmtList • RCURLY

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    FOR     shift, and go to state 39
    ID      shift, and go to state 15
    IF      shift, and go to state 40
    INPUT   shift, and go to state 41
    INT     shift, and go to state 6
    OUTPUT  shift, and go to state 42
    RETURN  shift, and go to state 43
    RCURLY  shift, and go to state 129
    VOID    shift, and go to state 7
    WHILE   shift, and go to state 45

    varDecl    go to state 46
    type       go to state 47
    primType   go to state 10
    blockStmt  go to state 48
    stmt       go to state 49
    assignExp  go to state 50
    callExp    go to state 51
    id         go to state 52


State 127

   24 blockStmt: FOR LPAREN stmt SEMICOL exp SEMICOL stmt • RPAREN LCURLY stmtList RCURLY

    RPAREN  shift, and go to state 130


State 128

   25 blockStmt: IF LPAREN exp RPAREN LCURLY stmtList RCURLY •
   26          | IF LPAREN exp RPAREN LCURLY stmtList RCURLY • ELSE LCURLY stmtList RCURLY

    ELSE  shift, and go to state 131

    $default  reduce using rule 25 (blockStmt)


State 129

   23 blockStmt: WHILE LPAREN exp RPAREN LCURLY stmtList RCURLY •

    $default  reduce using rule 23 (blockStmt)


State 130

   24 blockStmt: FOR LPAREN stmt SEMICOL exp SEMICOL stmt RPAREN • LCURLY stmtList RCURLY

    LCURLY  shift, and go to state 132


State 131

   26 blockStmt: IF LPAREN exp RPAREN LCURLY stmtList RCURLY ELSE • LCURLY stmtList RCURLY

    LCURLY  shift, and go to state 133


State 132

   24 blockStmt: FOR LPAREN stmt SEMICOL exp SEMICOL stmt RPAREN LCURLY • stmtList RCURLY

    $default  reduce using rule 20 (stmtList)

    stmtList  go to state 134


State 133

   26 blockStmt: IF LPAREN exp RPAREN LCURLY stmtList RCURLY ELSE LCURLY • stmtList RCURLY

    $default  reduce using rule 20 (stmtList)

    stmtList  go to state 135


State 134

   21 stmtList: stmtList • stmt SEMICOL
   22         | stmtList • blockStmt
   24 blockStmt: FOR LPAREN stmt SEMICOL exp SEMICOL stmt RPAREN LCURLY stmtList • RCURLY

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    FOR     shift, and go to state 39
    ID      shift, and go to state 15
    IF      shift, and go to state 40
    INPUT   shift, and go to state 41
    INT     shift, and go to state 6
    OUTPUT  shift, and go to state 42
    RETURN  shift, and go to state 43
    RCURLY  shift, and go to state 136
    VOID    shift, and go to state 7
    WHILE   shift, and go to state 45

    varDecl    go to state 46
    type       go to state 47
    primType   go to state 10
    blockStmt  go to state 48
    stmt       go to state 49
    assignExp  go to state 50
    callExp    go to state 51
    id         go to state 52


State 135

   21 stmtList: stmtList • stmt SEMICOL
   22         | stmtList • blockStmt
   26 blockStmt: IF LPAREN exp RPAREN LCURLY stmtList RCURLY ELSE LCURLY stmtList • RCURLY

    BOOL    shift, and go to state 4
    FN      shift, and go to state 5
    FOR     shift, and go to state 39
    ID      shift, and go to state 15
    IF      shift, and go to state 40
    INPUT   shift, and go to state 41
    INT     shift, and go to state 6
    OUTPUT  shift, and go to state 42
    RETURN  shift, and go to state 43
    RCURLY  shift, and go to state 137
    VOID    shift, and go to state 7
    WHILE   shift, and go to state 45

    varDecl    go to state 46
    type       go to state 47
    primType   go to state 10
    blockStmt  go to state 48
    stmt       go to state 49
    assignExp  go to state 50
    callExp    go to state 51
    id         go to state 52


State 136

   24 blockStmt: FOR LPAREN stmt SEMICOL exp SEMICOL stmt RPAREN LCURLY stmtList RCURLY •

    $default  reduce using rule 24 (blockStmt)


State 137

   26 blockStmt: IF LPAREN exp RPAREN LCURLY stmtList RCURLY ELSE LCURLY stmtList RCURLY •

    $default  reduce using rule 26 (blockStmt)
